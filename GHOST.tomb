/**
 * GHOSTMARKET - PHANTASMA SMART CONTRACT
 */

// ghostRom struct
struct ghostRom
{
    // Date the NFT was created - used to have a unique ID - timestamp
    created:timestamp;
    // Original owner of the NFT - address
    creator:address;
    // Commission (in %) for the royalties - number
    royalties:number;
    // Name of the NFT - string
    name:string;
    // Description of the NFT - string
    description:string;
    // Type of the NFT - number
    type:number;
    // Image of the NFT - IPFS hash - string
    imageURL:string;
    // Info URL of the NFT for extended properties - string
    infoURL:string;
    // Extended attribute1 type - string
    attributeType1:string;
    // Extended attribute1 value - string
    attributeValue1:string;
    // Extended attribute2 type - string
    attributeType2:string;
    // Extended attribute2 value - string
    attributeValue2:string;
    // Extended attribute3 type - string
    attributeType3:string;
    // Extended attribute3 value - string
    attributeValue3:string;
}

// ghostRam struct
struct ghostRam
{

}

// ghost token contract
token GHOST {

    // global storage for owner address
    global _addressOwner:address;
    // global storage for contract address
    global _addressContract:address;
    // global storage for contract name
    global _contractName:string;
    // global storage for contract pause
    global _contractPaused:bool;
    // global storage for locked content
    global _lockedStorageMap: storage_map<number, string>;
    // global storage for fees multiplier
    global _feesMultiplier:number;
	// global storage for fees symbol
    global _feesSymbol:string;
    // global storage for fees threshold1
    global _feesThreshold1:number;
    // global storage for fees threshold2
    global _feesThreshold2:number;
    // global storage for fees threshold3
    global _feesThreshold3:number;
	// global storage for fees address
	global _feesAddress:address;
    // global storage for infuse multiplier
    global _infuseMultiplier:number;

    // token name
    property name:string = _contractName;
    // token version
    property version:string = "1.0";
    // token is transferable
    property isTransferable:bool = true;
    // token is not fungible
    property isFungible:bool = false;
    // token is burnable
    property isBurnable:bool = true;
    // token has no max supply
    property maxSupply:number = 0;
    // token owner address
    property addressOwner:address = _addressOwner;
    // token fees multiplier
    property feesMultiplier:number = _feesMultiplier;
	// token fees symbol
    property feesSymbol:string = _feesSymbol;
    // token fees threshold1
    property feesThreshold1:number = _feesThreshold1;
    // token fees threshold2
    property feesThreshold2:number = _feesThreshold2;
    // token fees threshold2
    property feesThreshold3:number = _feesThreshold3;
	// token fees address
    property feesAddress:address = _feesAddress;
    // token infuse multiplier
    property infuseMultiplier:number = _infuseMultiplier;

    /// ghostNft struct
    nft ghostNft<ghostRom, ghostRam> {

        import Token;

        property created:timestamp {
            return _ROM.created;
        }

        property creator:address {
            return _ROM.creator;
        }

        property royalties:number {
            return _ROM.royalties;
        }

        property name:string {
            return _ROM.name;
        }

        property description:string {
            return _ROM.description;
        }

        property type:number {
            return _ROM.type;
        }

        property imageURL:string {
            return _ROM.imageURL;
        }

        property infoURL:string {
            return _ROM.infoURL;
        }

        property attributeType1:string {
            return _ROM.attributeType1;
        }

        property attributeValue1:string {
            return _ROM.attributeValue1;
        }

        property attributeType2:string {
            return _ROM.attributeType2;
        }

        property attributeValue2:string {
            return _ROM.attributeValue2;
        }

        property attributeType3:string {
            return _ROM.attributeType3;
        }

        property attributeValue3:string {
            return _ROM.attributeValue3;
        }

    }

    // librairies import
    import Runtime;
    import Token;
	import Map;
	import NFT;
    import Time;
    import UID;
    import Call;
    import Cryptography;

    // constructor with owner and all global var
    constructor(owner:address)
    {
        _addressOwner:= owner;
        _addressContract:= $THIS_ADDRESS;
        _contractName:= "GhostMarket NFT";
		_contractPaused:= false;
		_feesMultiplier:= 1;
		_feesSymbol:= "KCAL";
		_feesThreshold1:= 10;
		_feesThreshold2:= 40;
		_feesThreshold3:= 70;
		_feesAddress:= @P2KLzxq8cUi47URLZZYcLs54WPVYnknrHWVryUUUqhuhq5K; // ghostmarket
        _infuseMultiplier:= 1;
    }

    /// @dev Internal method to check if the contract is paused.
    /// @dev Returns bool.
    private checkContractPaused():bool
    {
        // check if contract is paused
        if (_contractPaused)
        {
            return true;
        }
        return false;
    }

    /// @dev Internal method to return base fees based on mint quantity
    /// @param numOfNfts - Quantity of NFT to mint - number
    /// @dev Returns number.
    private feesBase(numOfNfts:number):number
    {
		local feesBase:number;
        // if < threshold 1
        if (numOfNfts < _feesThreshold1)
        {
            feesBase := 10 * _feesMultiplier;
        }
		else {
    		// if < threshold 2
			if (numOfNfts >= _feesThreshold1 and numOfNfts < _feesThreshold2)
			{
				feesBase:= 25 * _feesMultiplier;
			}
			else
			{
      			// if < threshold 3
				if (numOfNfts >= _feesThreshold2 and numOfNfts < _feesThreshold3)
				{
					feesBase := 50 * _feesMultiplier;
				}
        		// if > threshold 3
				else
				{
					feesBase := 100 * _feesMultiplier;
				}
			}
		}
        return feesBase;
    }

	/// @dev Internal method to check if enough fees based on mint quantity
    /// @param numOfNfts - Quantity of NFT to mint - number
	/// @param creator - Address trying to mint - address
    private checkFees(numOfNfts:number, creator:address)
    {
        // calculate asset decimals
        local assetDecimals:number := 10 ^ Token.getDecimals(_feesSymbol);

        // current balance
        local balance:number := Token.getBalance(creator, _feesSymbol);

        // calculate required fees
        local feesRequired:number := this.feesBase(numOfNfts) * assetDecimals;

        // calculate missing fees
        local feesMissing:number := (feesRequired - balance) / assetDecimals;
		Runtime.expect(feesMissing < 0, "not enough fees to pay for this mint transaction, requires " + feesMissing + " more " + _feesSymbol);
    }

	/// @dev Internal method to pay fees based on mint quantity
    /// @param numOfNfts - Quantity of NFT to mint - number
	/// @param creator - Address trying to mint - address
    private payFees(numOfNfts:number, creator:address)
    {
        // calculate asset decimals
		local assetDecimals:number := 10 ^ Token.getDecimals(_feesSymbol);

        // calculate fees base
		local feesBaseResult:number := this.feesBase(numOfNfts);

        // calculate fees minus infuse
        local feesTransfer:number := (feesBaseResult - _infuseMultiplier) * assetDecimals;

        // calculate fees burn
        local feesBurn:number := feesBaseResult * assetDecimals;

        // fees payment
        Token.transfer(creator, _feesAddress, _feesSymbol, feesTransfer);

        // fees burn
		Token.burn(creator, _feesSymbol, feesBurn);
    }

    /// @dev Internal method to check if a token is a NFT
    /// @param asset - Asset symbol - string
    /// @dev Returns bool.
    private isNFT(asset:string):bool
    {
        // check tokenflag isFungible
        local flags:TokenFlags := Token.getFlags(asset);
        if (flags.isSet(TokenFlags.Fungible))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    /// @dev Internal method to validate a NFT series.
    /// @param editionId - ID of the NFT series - number
    /// @param editionMax - Edition Max the NFT series - number
    /// @param editionMode - Edition Mode the NFT series, 1 for duplicate, 2 for unique - number
    /// @param creator - Original owner of the NFT - address
    /// @param mintTicker - Ticker token on which to mint the NFT - string
    /// @param numOfNfts - Quantity of NFT to mint - number
    private validateSeries(editionId:number, editionMax:number, editionMode:number, creator:address, mintTicker:string, numOfNfts:number)
    {
        // check editionId parameter
        Runtime.expect(editionId >= 0, "invalid number for editionId, it should be >= 0, received " + editionId);

        // check editionMax parameter
        Runtime.expect(editionMax >= 0, "invalid number for editionMax, it should be >= 0, received " + editionMax);

        // check editionMode parameter
        Runtime.expect(editionMode > 0, "invalid number for editionMode, it should be > 0, received " + editionMode);
        Runtime.expect(editionMode < 3, "invalid number for editionMode, it should be < 3, received " + editionMode);

        // check numOfNfts parameter
        Runtime.expect(numOfNfts > 0, "invalid number for numOfNfts, it should be > 0, received " + numOfNfts);
        Runtime.expect(numOfNfts <= editionMax, "invalid number for numOfNfts, it should be < editionMax, received " + numOfNfts);
        if (editionMode == 2)
        {
            Runtime.expect(numOfNfts == 1, "invalid number for numOfNfts on unique mode series, it should be 1 max, received " + numOfNfts);
        }

        // if fees multiplier > 0, check if enough for transfer fees and burn fees
        if (_feesMultiplier > 0)
        {
            this.checkFees(numOfNfts, creator);
        }

        // check mintTicker parameter
        Runtime.expect(Token.exists(mintTicker), "invalid token for mintTicker, received " + mintTicker);
        Runtime.expect(this.isNFT(mintTicker), "invalid fungible flag for " + mintTicker);
    }

    /// @dev Internal method to validate a NFT mint.
    /// @param royalties - Commission (in %) for the royalties - number
    /// @param name - Name of the NFT to mint - string
    /// @param description - Description of the NFT to mint - string
    /// @param type - Type of the NFT - number
    /// @param imageURL - Image URL of the NFT - IPFS hash - string
    /// @param infoURL - Token URL of the NFT - External API - string
    /// @param attributeType1 - Extended properties of the NFT - string
    /// @param attributeValue1 - Extended properties of the NFT - string
    /// @param attributeType2 - Extended properties of the NFT - string
    /// @param attributeValue2 - Extended properties of the NFT - string
    /// @param attributeType3 - Extended properties of the NFT - string
    /// @param attributeValue3 - Extended properties of the NFT - string
    /// @param listPrice - NFT listing price - number
    /// @param listPriceCurrency - NFT listing price currency - string
    /// @param infusedAsset - NFT infuse asset - string
    /// @param infusedAmount - NFT infuse amount - number
    private validateMint(royalties:number, name:string, description:string, type:number, imageURL:string, attributeType1:string, attributeValue1:string, attributeType2:string, attributeValue2:string, attributeType3:string, attributeValue3:string, listPrice:number, listPriceCurrency:string, infusedAsset:string, infusedAmount:number)
    {
        // check royalties parameter
        Runtime.expect(royalties >= 0, "invalid number for royalties, it should be between 0 and 50");
        Runtime.expect(royalties <= 50, "invalid number for royalties, it should be between 0 and 50");

        // check name parameter
        Runtime.expect(name.length() >= 3, "invalid char length for name, it should be >= 3, received " + name.length());
        Runtime.expect(name.length() <= 30, "invalid char length for name, it should be <= 30, received " + name.length());

        // check description parameter
        Runtime.expect(description.length() >= 10, "invalid char length for description, it should be >= 10, received " + description.length());
        Runtime.expect(description.length() <= 100, "invalid char length for description, it should be <= 100, received " + description.length());

        // check type parameter
        Runtime.expect(type > 0, "invalid number for type, it should be > 0, received " + type);

        // check imageURL parameter
        Runtime.expect(imageURL.length() > 0, "invalid char length for imageURL, it should be > 0, received " + imageURL.length());

        // check extended parameters
        if (attributeType1.length() > 0)
        {
            Runtime.expect(attributeType1.length() < 15, "invalid extended attributeType1 length, received " + attributeType1.length());
            Runtime.expect(attributeValue1.length() > 0, "invalid extended attributeValue1 length, received " + attributeValue1.length());
            Runtime.expect(attributeValue1.length() < 15, "invalid extended attributeValue1 length, received " + attributeValue1.length());
        }
        if (attributeType2.length() > 0)
        {
            Runtime.expect(attributeType2.length() < 15, "invalid extended attributeType2 length, received " + attributeType2.length());
            Runtime.expect(attributeValue2.length() > 0, "invalid extended attributeType2 length, received " + attributeValue2.length());
            Runtime.expect(attributeValue2.length() < 15, "invalid extended attributeValue2 length, received " + attributeValue2.length());
        }
        if (attributeType3.length() > 0)
        {
            Runtime.expect(attributeType3.length() < 15, "invalid extended attributeType3 length, received " + attributeType3.length());
            Runtime.expect(attributeValue3.length() > 0, "invalid extended attributeValue3 length, received " + attributeValue3.length());
            Runtime.expect(attributeValue3.length() < 15, "invalid extended attributeValue3 length, received " + attributeValue3.length());
        }

        // check listPrice & listPriceCurrency parameter
        if (listPrice > 0)
        {
            Runtime.expect(Token.exists(listPriceCurrency), "invalid token for listPriceCurrency, received " + listPriceCurrency);
            Runtime.expect(this.isNFT(listPriceCurrency) == false, "invalid fungible flag for " + listPriceCurrency);
        }

        // check infusedAmount & infusedAsset parameter
        if (infusedAmount > 0)
        {
            Runtime.expect(Token.exists(infusedAsset), "invalid token for infusedAsset, received " + infusedAsset);
        }
    }

    /// @dev Internal method to infuse NFT with an asset.
    /// @param creator - Original owner of the NFT - address
    /// @param mintTicker - Ticker token on which to mint the NFT - string
    /// @param tokenID - NFT ID - number
    /// @param infusedAsset - NFT infuse asset - string
    /// @param infusedAmount - NFT infuse amount - number
    private infuseToken(creator:address, mintTicker:string, tokenID:number, infusedAsset:string, infusedAmount:number)
    {
        // infuse min value if user does not want to infuse
        if (_infuseMultiplier > 0 and infusedAmount == 0)
        {
            // local var for infuseAmountDefault
            local infuseAmountDefault:number := _infuseMultiplier * 10 ^ Token.getDecimals(_feesSymbol);

            // infuse NFT with min value
            NFT.infuse(creator, mintTicker, tokenID, _feesSymbol, infuseAmountDefault);
        }
        else
        {
            // if user wants to infuse
            if (infusedAmount > 0)
            {
                // local var for infuseAmountUser
                local infuseAmountUser:number := infusedAmount * 10 ^ Token.getDecimals(infusedAsset);

                // infuse NFT with user value
                NFT.infuse(creator, mintTicker, tokenID, infusedAsset, infuseAmountUser);
            }
        }
    }

    /// @dev Internal method to sell NFT on market contract.
    /// @param creator - Original owner of the NFT - address
    /// @param mintTicker - Ticker token on which to mint the NFT - string
    /// @param listPriceCurrency - NFT listing price currency - string
    /// @param tokenID - NFT ID - number
    /// @param listPrice - NFT listing price - number
    /// @param listLastEndDate - NFT listing end date - timestamp
    private sellToken(creator:address, mintTicker:string, listPriceCurrency:string, tokenID:number, listPrice:number, listLastEndDate:timestamp)
    {
        // sell token based on user choice
        Call.contract("market", "SellToken", creator, mintTicker, listPriceCurrency, tokenID, listPrice, listLastEndDate);
    }

    /// @dev Internal method to set the locked content storage map.
    /// @param lockedContent - NFT locked content hash - string
    /// @param tokenID - NFT ID - number
    private lockContent(lockedContent:string, tokenID:number)
    {
        // encryption key
        local encryptionKey:string := "ghostkey";

        // encrypted content
        local encryptedContent:string := Cryptography.AESEncrypt(lockedContent.toBytes(), encryptionKey.toBytes());

        // set locked content storage map
        _lockedStorageMap.set(tokenID, encryptedContent);
    }

    /// @dev Internal method to create a new NFT series.
    /// @param editionId - ID of the NFT series - number
    /// @param editionMax - Edition Max the NFT series - number
    /// @param editionMode - Edition Mode the NFT series, 1 for duplicate, 2 for unique - number
    /// @param creator - Original owner of the NFT - address
    /// @param mintTicker - Ticker token on which to mint the NFT - string
    private createSeries(editionId:number, editionMax:number, editionMode:number, creator:address, mintTicker:string)
    {
        // TokenSeries mode
        if (editionMode == 2)
        {
            // create series unique
            NFT.createSeries(creator, mintTicker, editionId, editionMax, TokenSeries.Unique, ghostNft);
        }
        else
        {
            // create series duplicated
            NFT.createSeries(creator, mintTicker, editionId, editionMax, TokenSeries.Duplicated, ghostNft);
        }

    }

    /// @dev Internal method to start a NFT mint.
    /// @param creator - Original owner of the NFT - address
    /// @param royalties - Commission (in %) for the royalties - number
    /// @param name - Name of the NFT to mint - string
    /// @param description - Description of the NFT to mint - string
    /// @param type - Type of the NFT - number
    /// @param imageURL - Image URL of the NFT - IPFS hash - string
    /// @param infoURL - Token URL of the NFT - External API - string
    /// @param attributeType1 - Extended properties of the NFT - string
    /// @param attributeValue1 - Extended properties of the NFT - string
    /// @param attributeType2 - Extended properties of the NFT - string
    /// @param attributeValue2 - Extended properties of the NFT - string
    /// @param attributeType3 - Extended properties of the NFT - string
    /// @param attributeValue3 - Extended properties of the NFT - string
    /// @param mintTicker - Ticker token on which to mint the NFT - string
    /// @param editionId - ID of the NFT series - number
    /// @param listPriceCurrency - NFT listing price currency - string
    /// @param listPrice - NFT listing price - number
    /// @param listLastEndDate - NFT listing end date - timestamp
    /// @param lockedContent - NFT locked content hash - string
    /// @param numOfNfts - Quantity of NFT to mint - number
    /// @param infusedAsset - NFT infuse asset - string
    /// @param infusedAmount - NFT infuse amount - number
    private mint(creator:address, royalties:number, name:string, description:string, type:number, imageURL:string, infoURL:string, attributeType1:string, attributeValue1:string, attributeType2:string, attributeValue2:string, attributeType3:string, attributeValue3:string, mintTicker:string, editionId:number, listPriceCurrency:string, listPrice:number, listLastEndDate:timestamp, lockedContent:string, numOfNfts:number, infusedAsset:string, infusedAmount:number)
    {
        // mint numOfNfts NFT
        while (numOfNfts > 0) {

            // local var for rom
            local rom:ghostRom := Struct.ghostRom(Time.now(), creator, royalties, name, description, type, imageURL, infoURL, attributeType1, attributeValue1, attributeType2, attributeValue2, attributeType3, attributeValue3);

            // mint NFT
            local tokenID:number := NFT.mint(creator, creator, mintTicker, rom, "", editionId);

            // infuse NFT
            this.infuseToken(creator, mintTicker, tokenID, infusedAsset, infusedAmount);

            // sell NFT
            if (listPrice > 0)
            {
                this.sellToken(creator, mintTicker, listPriceCurrency, tokenID, listPrice, listLastEndDate);
            }

            // if user wants locked content
            if (lockedContent.length() > 0)
            {
                // lock content
                this.lockContent(lockedContent,tokenID);

            }

            // loop number change
            numOfNfts := numOfNfts - 1;
        }
    }

    /// @dev Update the current token contract owner address to another address.
    /// @param newOwner - Address of the new owner - address
    public updateOwner(newOwner:address)
    {
        // check is witness and is current owner
        Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");

        // set new owner
        _addressOwner:= newOwner;
    }

    /// @dev Update the current status of the token contract (paused / active).
    /// @param pause - Status of the contract - bool
    public updatePause(pause:bool)
    {
        // check is witness and is current owner
        Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");

        // set contract status
        _contractPaused:= pause;
    }

    /// @dev Update the current fees multiplier.
    /// @param feesMultiplier - Number to use to multiply base fees - number
    public updateFeesMultiplier(feesMultiplier:number)
    {
        // check is witness and is current owner
        Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");

        // check feesMultiplier parameter
        Runtime.expect(feesMultiplier >= 0, "invalid number for feesMultiplier, it should be >= 0, received " + feesMultiplier);

        // set fees multiplier
        _feesMultiplier:= feesMultiplier;
    }

	/// @dev Update the current asset used for fees.
    /// @param feesSymbol - Asset to use to pay fees - string
    public updateFeesSymbol(feesSymbol:string)
    {
        // check is witness and is current owner
        Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");

        // check feesSymbol parameter
        Runtime.expect(Token.exists(feesSymbol), "invalid token for feesSymbol, received " + feesSymbol);
        Runtime.expect(this.isNFT(feesSymbol) == false, "invalid fungible flag for " + feesSymbol);

        // set fees symbol
        _feesSymbol:= feesSymbol;
    }

    /// @dev Update the current fees thresholds.
    /// @param feesThresholdIndex - Index of the threshold (1,2 or 3) - number
    /// @param feesThresholdValue - Value of the specific threshold - number
    public updateFeesThresholds(feesThresholdIndex:number, feesThresholdValue:number)
    {
        // check is witness and is current owner
        Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");

        // check feesThresholdIndex parameter
        Runtime.expect(feesThresholdIndex <= 3, "invalid number for feesThresholdIndex, it should be 1,2 or 3, received " + feesThresholdIndex);
        Runtime.expect(feesThresholdIndex > 0, "invalid number for feesThresholdIndex, it should be 1,2 or 3, received " + feesThresholdIndex);

        // check feesThresholdValue parameter
        Runtime.expect(feesThresholdValue > 0, "invalid number for feesThresholdValue, it should be > 0, received " + feesThresholdValue);

        // set fees thresholds
        if (feesThresholdIndex == 1)
        {
            _feesThreshold1:= feesThresholdValue;
        }
        if (feesThresholdIndex == 2)
        {
            _feesThreshold2:= feesThresholdValue;
        }
        if (feesThresholdIndex == 3)
        {
            _feesThreshold3:= feesThresholdValue;
        }
    }

	/// @dev Update the current fees address.
    /// @param feesAddress - address used to collect fees - address
    public updateFeesAddress(feesAddress:address)
    {
        // check is witness and is current owner
        Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");

        // set fees address
        _feesAddress:= feesAddress;
    }

    /// @dev Update the infuse multiplier.
    /// @param infuseMultiplier - multiplier used for infuse - number
    public updateInfuseMultiplier(infuseMultiplier:number)
    {
        // check is witness and is current owner
        Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");

        // check infuseMultiplier parameter
        Runtime.expect(infuseMultiplier >= 0, "invalid number for infuseMultiplier, it should be >= 0, received " + infuseMultiplier);

        // set infuse multiplier
        _infuseMultiplier := infuseMultiplier;
    }

    /// @dev Mint a specific number of NFT on GhostMarket contract.
    /// @param editionId - ID of the NFT series - number
    /// @param editionMax - Edition Max the NFT series - number
    /// @param editionMode - Edition Mode the NFT series, 1 for duplicate, 2 for unique - number
    /// @param creator - Original owner of the NFT - address
    /// @param royalties - Commission (in %) for the royalties - number
    /// @param mintTicker - Ticker token on which to mint the NFT - string
    /// @param numOfNfts - Quantity of NFT to mint - number
    /// @param name - Name of the NFT to mint - string
    /// @param description - Description of the NFT to mint - string
    /// @param type - Type of the NFT - number
    /// @param imageURL - Image URL of the NFT - IPFS hash - string
    /// @param infoURL - Token URL of the NFT - External API - string
    /// @param attributeType1 - Extended properties of the NFT - string
    /// @param attributeValue1 - Extended properties of the NFT - string
    /// @param attributeType2 - Extended properties of the NFT - string
    /// @param attributeValue2 - Extended properties of the NFT - string
    /// @param attributeType3 - Extended properties of the NFT - string
    /// @param attributeValue3 - Extended properties of the NFT - string
    /// @param lockedContent - NFT locked content hash - string
    /// @param listPrice - NFT listing price - number
    /// @param listPriceCurrency - NFT listing price currency - string
    /// @param listLastEndDate - NFT listing end date - timestamp
    /// @param infusedAsset - NFT infuse asset - string
    /// @param infusedAmount - NFT infuse amount - number
    public mintToken(editionId:number, editionMax:number, editionMode:number, creator:address, royalties:number, mintTicker:string, numOfNfts:number, name:string, description:string, type:number, imageURL:string, infoURL:string, attributeType1:string, attributeValue1:string, attributeType2:string, attributeValue2:string, attributeType3:string, attributeValue3:string, lockedContent:string, listPrice:number, listPriceCurrency:string, listLastEndDate:timestamp, infusedAsset:string, infusedAmount:number)
    {
        // check if contract is active
        Runtime.expect(this.checkContractPaused() != true, "GhostMarket smart contract is currently paused");

        // check is witness
        Runtime.expect(Runtime.isWitness(creator), "invalid witness");

        // check allow gas dapp transaction fees
        Runtime.expect(Runtime.gasTarget() == _addressContract, "invalid address for dapp transaction fees in AllowGas, it should be " + _addressContract);

        // validate series
        this.validateSeries(editionId, editionMax, editionMode, creator, mintTicker, numOfNfts);

        // check if new series, then validate and create it
        if (editionId == 0)
        {
            // validate mint tokens if new series
            this.validateMint(royalties, name, description, type, imageURL, attributeType1, attributeValue1, attributeType2, attributeValue2, attributeType3, attributeValue3, listPrice, listPriceCurrency, infusedAsset, infusedAmount);

            // new series - create series ID
            editionId := UID.generate();

            // new series - create series
            this.createSeries(editionId, editionMax, editionMode, creator, mintTicker);
        }

        // mint tokens
        this.mint(creator, royalties, name, description, type, imageURL, infoURL, attributeType1, attributeValue1, attributeType2, attributeValue2, attributeType3, attributeValue3, mintTicker, editionId, listPriceCurrency, listPrice, listLastEndDate, lockedContent, numOfNfts, infusedAsset, infusedAmount);

        // if feesMultipler > 0, pay service fees and pay burn fees
        if (_feesMultiplier > 0)
        {
            this.payFees(numOfNfts, creator);
        }
    }

    /// @dev Get locked content of a specific pair symbol/nftid.
    /// @param nftSymbol - Symbol of the NFT to query for content - string
    /// @param nftID - NFT ID - number
    /// @dev Returns string.
    public getLockedContent(nftSymbol: string, nftID:number):string
    {
        // check is witness and is current owner
        local nftInfo:NFT := NFT.read(nftSymbol, nftID);
		Runtime.expect(Runtime.isWitness(nftInfo.Owner), "invalid witness");

        // return content if owner
        if (_lockedStorageMap.has(nftID))
        {
            // encryption key
            local encryptionKey:string := "ghostkey";

            // encrypted content
            local encryptedContent:string := _lockedStorageMap.get(nftID);

            // decrypted content
            local decryptedContent:string := Cryptography.AESDecrypt(encryptedContent.toBytes(), encryptionKey.toBytes());

            return decryptedContent;
        }
    }

    /// @dev onUpgrade trigger.
    /// @param from - Address from - address
	trigger onUpgrade(from:address)
    {
        // check is witness and is current owner
		Runtime.expect(Runtime.isWitness(_addressOwner), "invalid witness");
    }

    /// @dev onMint trigger.
    /// @param from - Address from - address
    /// @param from - Address to - address
    /// @param from - Symbol - string
    /// @param from - Amount - number
    trigger onMint(from:address, to:address, symbol:string, amount:number)
    {
        // enforce mint only from contract
        Runtime.expect(Runtime.context() == _contractName, "minting a nft is only supported from within " + _contractName + " contract");
    }

    /// @dev onSeries trigger.
    /// @param from - Address from - address
    trigger onSeries(from: address)
    {
        // enforce create series only from contract
        Runtime.expect(Runtime.context() == _contractName, "creating a series is only supported from within " + _contractName + " contract");
    }

}